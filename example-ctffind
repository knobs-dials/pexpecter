#!/usr/bin/python2

import os
import pexpect
import time

import helpers_pexpect

def fn_parts(pathstr):
    """ For a given path, returns a dict with     dirname, basename, basename without extension, extension
        for extensions, we split only on the last dot.
 
        For example: 
'/q/a.b/base.xml' --> {'ext': 'xml',  'base': 'base.xml',  'noext': 'base',  'dir': '/q/a.b',  fullpathnoext: '/q/a.b/base'}
           'aa.b' --> {'ext': 'b',    'base': 'aa.b',      'noext': 'aa',    'dir': '',        fullpathnoext: 'aa'}
           'bare' --> {'ext': None,   'base': 'bare',      'noext': 'bare',  'dir': '',        fullpathnoext: 'bare'}
         Note that 'ext':None, not ''
    """
    dirn   = os.path.dirname(pathstr)
    basen  = os.path.basename(pathstr)
    dotinbase = basen.rfind('.')
    if dotinbase==-1:
        noext=basen
        ext=None
    else:
        noext = basen[:dotinbase]
        ext   = basen[dotinbase+1:]
    return {'dir':dirn, 'base':basen , 'noext':noext , 'ext':ext, 'fullpathnoext':os.path.join(dirn,noext) }



def ctffind4(inputmrc,
             pixelsize_A,
             acc_kV=300.0,
             sphericalaberration=2.7,
             amplitudecontrast_frac=0.07,
             spectrumsize_pixels=512,
             minres_A=25,
             maxres_A=4,
             mindef_A=2000,
             maxdef_A=50000,
             defstep_A=350.,
             astigpenaltyover_A=2000,
             phaseshift_yesno='no',
             phaseshift_minrad=0,
             phaseshift_maxrad=3.15,
             phaseshift_steprad=0.1,

             debug=0,
             wait_and_close=True,
             wait_timeout_sec=300,

             targetdir=None,
             ):
    ''' Wraps Gregorieff Lab's ctffind4 question mode in a function.
        Most of this function's default values are ctffind4's own defaults (as of this writing)

        Returns the diagnostic MRC filename.  It will also have output a .txt and _avrot.txt alongside.
    '''

    fp = fn_parts( inputmrc )
    if targetdir:
        diagbase = os.path.join( targetdir, fp['noext'])+'_diag.mrc'
    else:
        diagbase = fp['fullpathnoext']+'_diag.mrc' 

    rules=[
        ['Input image file name[^:]*:',                 inputmrc ],

        ['Output diagnostic filename[^:]*:',            diagbase  ],
        ['Output diagnostic image file name[^:]*:',     diagbase  ], # v4.1

        ['Pixel size[\s0-9.,\x1b\[\]m]+:',            '%f'%pixelsize_A],  # written that way to not match the "Pixel size for fitting" in the pre-calculation or post-calculation summary
        ['Acceleration voltage[^:]*:',                  '%.1f'%acc_kV],
        ['Spherical aberration[^:]*:',                  '%f'%sphericalaberration],
        ['Amplitude contrast[^:]*:',                    '%f'%amplitudecontrast_frac],

        ['Size of power spectrum to compute[^:]*:',     '%d'%spectrumsize_pixels], # CONSIDER: ensure twopower?
        ['Size of amplitude spectrum to compute[^:]*:', '%d'%spectrumsize_pixels], # v4.1

        ['Minimum resolution[^:]*:',                    '%f'%minres_A],
        ['Maximum resolution[^:]*:',                    '%f'%maxres_A],
        ['Minimum defocus[^:]*:',                       '%f'%mindef_A],
        ['Maximum defocus[^:]*:',                       '%f'%maxdef_A],
        ['Defocus search step[^:]*:',                   '%d'%defstep_A],

        ['Do you know what astigmatism is present[^:]*:', 'no'],  # v4.1
        ['Do you expect very large astigmatism[^:]*:',    'yes'], # v4.1. apparently >1000A is considered very large.
        ['Use a restraint on astigmatism?[^:]*:',         'yes'], # v4.1. Penalise above given value

        ['Expected \(tolerated\) astigmatism[^:]*:',      '%f'%astigpenaltyover_A], # v4.1

        ['Do you want to set expert options[^:]*:',       'no'], # v4.1. HAven't checked which they are yet

        ['Find additional phase shift[^:]*:',             phaseshift_yesno],
        # only get asked if you answer yes to phase shift:
        ['Minimum phase shift[^:]*:',                     '%.2f'%phaseshift_minrad],
        ['Maximum phase shift[^:]*:',                     '%.2f'%phaseshift_maxrad],
        ['Phase shift search step[^:]*:',                 '%f'%phaseshift_steprad],

        ['more exhaustive search',                        'no'],

        ['Summary information',                           None], # it's starting -- give back control
    ]

    proc = pexpect.spawn('ctffind') # assumes it's in path
    start = time.time()

    retval = helpers_pexpect.interact_rules( proc, rules, debug=debug )
    print( 'retval: %s'%retval )

    if wait_and_close:
        weclosed = False
        while time.time() < start + wait_timeout_sec:
            time.sleep(0.05)
            if not proc.isalive():
                print( "ctffind execution done after approx %.3f seconds"%(time.time()-start) )
                proc.close()
                weclosed = True
                break
            if debug >= 1:
                print("...waiting for process to finish..")
            time.sleep(0.3)
        if not weclosed: # i.e. we timed out waiting for it to finish
            proc.close()

    return diagbase

if __name__ == '__main__':
    ctffind4('test.mrc', 0.91, debug=1)
    ''' With debug=1 the output looks something like

        **   Welcome to Ctffind   **

            Version : 4.1.5
           Compiled : Sep  9 2016
               Mode : Interactive

Input image file name [smaller.mrc]                : test.mrc
Output diagnostic image file name
[smaller_diag.mrc]                                 : test_diag.mrc
Pixel size [1.820000]                              : 0.910000
Acceleration voltage [300.0]                       : 300.0
Spherical aberration [2.700000]                    : 2.700000
Amplitude contrast [0.070000]                      : 0.070000
Size of amplitude spectrum to compute [512]        : 512
Minimum resolution [25.000000]                     : 25.000000
Maximum resolution [4.000000]                      : 4.000000
Minimum defocus [2000.000000]                      : 2000.000000
Maximum defocus [50000.000000]                     : 50000.000000
Defocus search step [350]                          : 350
Do you know what astigmatism is present? [no]      : no
Slower, more exhaustive search? [no]               : no
Use a restraint on astigmatism? [yes]              : yes
Expected (tolerated) astigmatism [2000.000000]     : 2000.000000
Find additional phase shift? [no]                  : no
Do you want to set expert options? [no]            : no

Summary information for file test.mrc
Number of columns, rows, sections: 3838, 3710, 1
MRC data mode: 2
Bit depth: 32
Pixel size: 1.000 1.000 1.000
Bytes in symmetry header: 0

Working on micrograph 1 of 1
Estimated defocus values        : 7932.06 , 7481.13 Angstroms
Estimated azimuth of astigmatism: -14.88 degrees
Score                           : 0.03449
Pixel size for fitting          : 1.401 Angstroms
Thon rings with good fit up to  : 6.9 Angstroms
Did not detect CTF aliasing

Summary of results                          : test_diag.txt
Diagnostic images                           : test_diag.mrc
Detailed results, including 1D fit profiles : test_diag_avrot.txt
Use this command to plot 1D fit profiles    : ctffind_plot_results.sh test_diag_avrot.txt


retval: 0
ctffind execution done after approx 7.271 seconds
    '''

    #import sys
    #for fn in sys.argv[1:]:
    #    ctffind4(fn, 1, debug=1) # too much work to copy in code to read pixel size for an example no one is going to run...
    #ctffind4('smaller.mrc', 1.82, debug=1)

